import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.linear_model import PassiveAggressiveClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_score, recall_score, accuracy_score, f1_score
from features import SYSTEMCALLS, PERMISSIONS
from visualization import Plot, Graph

FEATURES = SYSTEMCALLS + PERMISSIONS

class Scores:
    def __init__(self, name) -> None:
        self.name = name
        self.accuracy = []
        self.f1 = []
        self.precision = []
        self.recall = []
    
    def get_scores(self, accuracy, precision, recall, f1):
        self.accuracy.append(accuracy)
        self.f1.append(f1)
        self.precision.append(precision)
        self.recall.append(recall)
    
    def display(self):
        print(f'{self.name}_accuracy =', self.accuracy)
        print(f'{self.name}_f1 =', self.f1)
        print(f'{self.name}_recall =', self.recall)
        print(f'{self.name}_precision =', self.precision)

def train_model(data, balancer = None, classweight=None):
    X = data[FEATURES]
    y = data.Malware

    if balancer != None:
        X, y = balancer.fit_resample(X, y)
    
    if classweight == 'balanced':
        model = RandomForestClassifier(class_weight='balanced')
    else:
        model = RandomForestClassifier(n_jobs=-1)
    
    model.fit(X, y)

    return model

def train_sgd_model(data, balancer = None, classweight=None):
    X = data[FEATURES]
    y = data.Malware

    if balancer != None:
        X, y = balancer.fit_resample(X, y)
    
    if classweight == 'balanced':
        model = SGDClassifier(class_weight='balanced')
    else:
        model = SGDClassifier(n_jobs=-1)
    
    model.fit(X, y)

    return model


def evaluate(model, data, features):
    X_test = data[features]
    y_test = data.Malware

    y_pred = model.predict(X_test)

    accuracy = round(accuracy_score(y_test, y_pred) * 100, 1)
    precision = round(precision_score(y_test, y_pred) * 100, 1)
    recall = round(recall_score(y_test, y_pred) * 100, 1)
    f1 = round(f1_score(y_test, y_pred) * 100, 1)

    return accuracy, precision, recall, f1

def split_data(data, testsize):
    X = data[FEATURES]
    y = data.Malware

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=testsize)

    X_train['Malware'] = y_train
    X_test['Malware'] = y_test

    return X_train, X_test

def main():
    # retrain_scores = Scores('retrain_scores')
    sgd_last_1_scores = Scores('sgd_last_1_scores')
    sgd_retrain_scores = Scores('sgd_retrain_scores')
    sgd_incremental_scores = Scores('sgd_incremental_scores')

    # data_train = pd.read_csv('./datasets/subsets_20_kept/train/2010-Q1.csv')
    data_train_norm = pd.read_csv('./datasets/realistic_datasets-Normalized/train/2010-Q1.csv')
    # data = pd.read_csv('./datasets/subsets_by_EarliestModDate-Normalized/2010-Q1.csv')

    sgd_last_1_model = SGDClassifier(n_jobs=-1)
    sgd_last_1_model.fit(data_train_norm[FEATURES], data_train_norm.Malware)

    sgd_retrain_model = SGDClassifier(n_jobs=-1)
    sgd_retrain_model.fit(data_train_norm[FEATURES], data_train_norm.Malware)

    sgd_incremental_model = SGDClassifier(n_jobs=-1)
    sgd_incremental_model.partial_fit(data_train_norm[FEATURES], data_train_norm.Malware, classes=[0, 1])

    # sgd_last_1_model = SGDClassifier(n_jobs=-1)
    # sgd_last_1_model.fit(data[FEATURES], data.Malware)

    # sgd_retrain_model = SGDClassifier(n_jobs=-1)
    # sgd_retrain_model.fit(data[FEATURES], data.Malware)

    # sgd_incremental_model = SGDClassifier(n_jobs=-1)
    # sgd_incremental_model.partial_fit(data[FEATURES], data.Malware, classes=[0, 1])

    # retrain_model = RandomForestClassifier(n_jobs=-1)
    # retrain_model.fit(data_train[FEATURES], data_train.Malware)

    # previous_samples = []
    # previous_samples.append(data_keep)

    for year in range(2010, 2019, 1):
        for quater in [1, 2, 3, 4]:
            # file = f'./datasets/subsets_by_EarliestModDate-Normalized/{year}-Q{quater}.csv'
            # train_file = f'./datasets/subsets_20_kept/train/{year}-Q{quater}.csv'
            # test_file = f'./datasets/subsets_20_kept/test/{year}-Q{quater}.csv'

            train_file_norm = f'./datasets/realistic_datasets-Normalized/train/{year}-Q{quater}.csv'
            test_file_norm = f'./datasets/realistic_datasets-Normalized/test/{year}-Q{quater}.csv'

            if train_file_norm == './datasets/realistic_datasets-Normalized/train/2010-Q1.csv' or test_file_norm == './datasets/realistic_datasets-Normalized/test/2010-Q1.csv':
                continue

            # if file == './datasets/subsets_by_EarliestModDate-Normalized/2010-Q1.csv':
            #     continue

            # new_data = pd.read_csv(file)

            # new_data_train, data_keep = split_data(new_data, testsize=0.2)

            # new_data_train = pd.read_csv(train_file)
            # data_test = pd.read_csv(test_file)

            new_data_train_norm = pd.read_csv(train_file_norm)
            data_test_norm = pd.read_csv(test_file_norm)

            # previous_dataframe = pd.concat(previous_samples).sample(frac=1)
            # data_test = pd.concat([new_data_train, previous_dataframe]).sample(frac=1)

            # previous_samples.append(data_keep)

            # evaluate
            accuracy, precision, recall, f1 = evaluate(sgd_last_1_model, data_test_norm, FEATURES)
            sgd_last_1_scores.get_scores(accuracy, precision, recall, f1)
            print(f'{year}-Q{quater}-M1 ', accuracy, precision, recall, f1)

            accuracy, precision, recall, f1 = evaluate(sgd_retrain_model, data_test_norm, FEATURES)
            sgd_retrain_scores.get_scores(accuracy, precision, recall, f1)
            print(f'{year}-Q{quater}-M2 ', accuracy, precision, recall, f1)

            accuracy, precision, recall, f1 = evaluate(sgd_incremental_model, data_test_norm, FEATURES)
            sgd_incremental_scores.get_scores(accuracy, precision, recall, f1)
            print(f'{year}-Q{quater}-M3 ', accuracy, precision, recall, f1)

            # accuracy, precision, recall, f1 = evaluate(sgd_last_1_model, new_data, FEATURES)
            # sgd_last_1_scores.get_scores(accuracy, precision, recall, f1)
            # print(f'{year}-Q{quater}-M1 ', accuracy, precision, recall, f1)

            # accuracy, precision, recall, f1 = evaluate(sgd_retrain_model, new_data, FEATURES)
            # sgd_retrain_scores.get_scores(accuracy, precision, recall, f1)
            # print(f'{year}-Q{quater}-M2 ', accuracy, precision, recall, f1)

            # accuracy, precision, recall, f1 = evaluate(sgd_incremental_model, new_data, FEATURES)
            # sgd_incremental_scores.get_scores(accuracy, precision, recall, f1)
            # print(f'{year}-Q{quater}-M3 ', accuracy, precision, recall, f1)

            # accuracy, precision, recall, f1 = evaluate(retrain_model, data_test, FEATURES)
            # retrain_scores.get_scores(accuracy, precision, recall, f1)
            # print(f'{year}-Q{quater}-M4 ', accuracy, precision, recall, f1)

            # retrain

            # data_train = pd.concat([data_train, new_data]).sample(frac=1)
            data_train_norm = pd.concat([data_train_norm, new_data_train_norm]).sample(frac=1)

            # data = pd.concat([data, new_data]).sample(frac=1)

            sgd_last_1_model.fit(new_data_train_norm[FEATURES], new_data_train_norm.Malware)

            sgd_retrain_model.fit(data_train_norm[FEATURES], data_train_norm.Malware)

            sgd_incremental_model.partial_fit(new_data_train_norm[FEATURES], new_data_train_norm.Malware)

            # retrain_model.fit(data_train[FEATURES], data_train.Malware)
    
    sgd_last_1_scores.display()
    sgd_retrain_scores.display()
    sgd_incremental_scores.display()
    # retrain_scores.display()

    # visualize
    accuracy_plot = Plot('Accuracy comparison of sgd_last_1, sgd_retrain, sgd_incremental',
                         'accuracy_comparison_SGDClassifier_real_dataset.png')
    accuracy_plot.add_graph(Graph(sgd_last_1_scores.accuracy, 'y', 's', '-.', 'sgd_last_1'))
    accuracy_plot.add_graph(Graph(sgd_retrain_scores.accuracy, 'c', 'o', '-', 'sgd_retrain'))
    accuracy_plot.add_graph(Graph(sgd_incremental_scores.accuracy, 'm', 'v', ':', 'sgd_incremental'))
    # accuracy_plot.add_graph(Graph(retrain_scores.accuracy, 'g', '*', '--', 'retrain'))  
    accuracy_plot.display()

    f1_plot = Plot('F1 comparison of sgd_last_1, sgd_retrain, sgd_incremental',
                   'f1_comparison_SGDClassifier_real_dataset.png')
    f1_plot.add_graph(Graph(sgd_last_1_scores.f1, 'y', 's', '-.', 'sgd_last_1'))
    f1_plot.add_graph(Graph(sgd_retrain_scores.f1, 'c', 'o', '-', 'sgd_retrain'))
    f1_plot.add_graph(Graph(sgd_incremental_scores.f1, 'm', 'v', ':', 'sgd_incremental'))
    # f1_plot.add_graph(Graph(retrain_scores.f1, 'g', '*', '--', 'retrain'))  
    f1_plot.display()

    recall_plot = Plot('Recall comparison of sgd_last_1, sgd_retrain, sgd_incremental',
                       'recall_comparison_SGDClassifier_real_dataset.png')
    recall_plot.add_graph(Graph(sgd_last_1_scores.recall, 'y', 's', '-.', 'sgd_last_1'))
    recall_plot.add_graph(Graph(sgd_retrain_scores.recall, 'c', 'o', '-', 'sgd_retrain'))
    recall_plot.add_graph(Graph(sgd_incremental_scores.recall, 'm', 'v', ':', 'sgd_incremental'))
    # recall_plot.add_graph(Graph(retrain_scores.recall, 'g', '*', '--', 'retrain'))  
    recall_plot.display()

    precision_plot = Plot('Precision comparison of sgd_last_1, sgd_retrain, sgd_incremental',
                          'precision_comparison_SGDClassifier_real_dataset.png')
    precision_plot.add_graph(Graph(sgd_last_1_scores.precision, 'y', 's', '-.', 'sgd_last_1'))
    precision_plot.add_graph(Graph(sgd_retrain_scores.precision, 'c', 'o', '-', 'sgd_retrain'))
    precision_plot.add_graph(Graph(sgd_incremental_scores.precision, 'm', 'v', ':', 'sgd_incremental'))
    # precision_plot.add_graph(Graph(retrain_scores.precision, 'g', '*', '--', 'retrain'))  
    precision_plot.display()

if __name__ == '__main__':
    main()