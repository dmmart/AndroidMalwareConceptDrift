import numpy as np
import matplotlib.pyplot as plt

# accuracy_scores = [0.945, 0.973, 0.955, 0.964, 0.963, 0.906, 0.685, 0.755, 0.91, 0.917, 0.946, 0.935, 0.931, 0.933, 0.972, 0.972, 0.947, 0.984, 0.902, 0.904, 0.896, 0.938, 0.854, 0.977, 0.974, 0.589, 0.875, 0.931, 0.997, 0.99, 0.925, 0.968, 0.979, 0.7, 0.694, 1.0, 0.755, 0.714, 0.95]
# precision_scores = [1.0, 0.974, 0.992, 0.988, 0.983, 0.997, 0.998, 1.0, 1.0, 0.999, 1.0, 0.997, 0.998, 0.997, 0.997, 0.994, 0.995, 0.997, 0.973, 0.91, 0.984, 0.955, 0.943, 0.985, 0.97, 0.976, 0.93, 0.958, 0.999, 0.996, 0.995, 0.993, 0.99, 0.852, 0.719, 1.0, 0.804, 0.429, 0.954]
# recall_scores = [0.534, 0.564, 0.57, 0.657, 0.627, 0.623, 0.681, 0.746, 0.909, 0.911, 0.943, 0.932, 0.926, 0.932, 0.973, 0.975, 0.947, 0.986, 0.899, 0.922, 0.871, 0.955, 0.842, 0.989, 0.993, 0.546, 0.902, 0.958, 0.998, 0.993, 0.928, 0.975, 0.988, 0.742, 0.92, 1.0, 0.902, 1.0, 0.99]

TIME_PERIODS = ['2010-Q2', '2010-Q3', '2010-Q4', '2011-Q1', '2011-Q2', '2011-Q3', '2011-Q4', '2012-Q1', '2012-Q2',
                '2012-Q3', '2012-Q4', '2013-Q1', '2013-Q2', '2013-Q3', '2013-Q4', '2014-Q1', '2014-Q2', '2014-Q3', 
                '2014-Q4', '2015-Q1', '2015-Q2', '2015-Q3', '2015-Q4', '2016-Q1', '2016-Q2', '2016-Q3', '2016-Q4', 
                '2017-Q1', '2017-Q2', '2017-Q3', '2017-Q4', '2018-Q1', '2018-Q2', '2018-Q3', '2018-Q4']

# class Plot:
#     def __init__(self, accuracy_scores, recall_scores, precision_scores):
#         # self.path = path
#         self.accuracy_scores = accuracy_scores
#         self.recall_scores = recall_scores
#         self.precision_scores = precision_scores

#         self.display_combined()
#         self.display_accuracy()
#         self.display_precision()
#         self.display_recall()
    
#     def display_combined(self):
#         accuracy_line, = plt.plot(TIME_PERIODS, self.accuracy_scores, 'o-c')
#         recall_line, = plt.plot(TIME_PERIODS, self.recall_scores, 'v:m')
#         precision_line, = plt.plot(TIME_PERIODS, self.precision_scores, 's--g')

#         plt.legend((accuracy_line, recall_line, precision_line), ('Accuracy', 'Recall', 'Precision'))

#         plt.title('Combined metrics')
#         plt.xlabel('Time Period')
#         plt.ylabel('Percentage %')
        
#         plt.xticks(rotation=70)
#         plt.yticks(np.arange(30.0, 100.1, 5))

#         plt.grid()
#         # plt.savefig(self.path + 'combined.png')
#         plt.show()

#     def display_accuracy(self):
#         plt.plot(TIME_PERIODS, self.accuracy_scores, 'o-c')

#         plt.title('Accuracy')
#         plt.xlabel('Time Period')
#         plt.ylabel('Percentage %')
        
#         plt.xticks(rotation=70)
#         plt.yticks(np.arange(30.0, 100.1, 5))

#         plt.grid()
#         # plt.savefig(self.path + 'accuracy.png')
#         plt.show()

#     def display_recall(self):
#         plt.plot(TIME_PERIODS, self.recall_scores, 'v:m')

#         plt.title('Recall')
#         plt.xlabel('Time Period')
#         plt.ylabel('Percentage %')
        
#         plt.xticks(rotation=70)
#         plt.yticks(np.arange(30.0, 100.1, 5))

#         plt.grid()
#         # plt.savefig(self.path + 'recall.png')
#         plt.show()

#     def display_precision(self):
#         plt.plot(TIME_PERIODS, self.precision_scores, 's--g')
        
#         plt.title('Precision')
#         plt.xlabel('Time Period')
#         plt.ylabel('Percentage %')
        
#         plt.xticks(rotation=70)
#         plt.yticks(np.arange(30.0, 100.1, 5))

#         plt.grid()
#         # plt.savefig(self.path + 'precision.png')
#         plt.show()

# plot = Plot(accuracy_scores, recall_scores, precision_scores)

class ComparisonPlot:
    def __init__(self, results_unbalanced, results_balanced, file_name) -> None:
        self.results_unbalanced = results_unbalanced
        self.results_balanced = results_balanced
        self.avg_unbalanced = round(sum(self.results_unbalanced) / len(self.results_unbalanced), 1)
        self.avg_balanced = round(sum(self.results_balanced) / len(self.results_balanced), 1)
        self.file_name = file_name
        self.display()
    
    def display(self):
        line_1, = plt.plot(TIME_PERIODS, self.results_unbalanced, 'o-c')
        line_2, = plt.plot(TIME_PERIODS, self.results_balanced, 'v:m')
        line_1_avg = plt.axhline(y=self.avg_unbalanced, color='c', linestyle='dashed', linewidth=1)
        line_2_avg = plt.axhline(y=self.avg_balanced, color='m', linestyle='dashed', linewidth=1)

        # plt.legend((line_1, line_2, line_1_avg, line_2_avg),
        #             ('Unbalanced', 'Balanced', f'Unbalanced avg ({self.avg_unbalanced}%)', f'Balanced avg ({self.avg_balanced}%)'))

        # plt.title(f'{self.file_name} comparison of unbalanced dataset and SMOTE')

        # plt.legend((line_1, line_2, line_1_avg, line_2_avg),
        #             ('RandomOverSampler', 'SMOTE', f'RandomOverSampler avg ({self.avg_unbalanced}%)', f'SMOTE avg ({self.avg_balanced}%)'))

        # plt.title(f'{self.file_name} comparison of RandomOverSampler and SMOTE')

        plt.legend((line_1, line_2, line_1_avg, line_2_avg),
                    ('Default', '~10% malicious', f'Default avg ({self.avg_unbalanced}%)', f'~10% malicious avg ({self.avg_balanced}%)'))

        plt.title(f'{self.file_name} comparison of default test dataset and balanced to ~10% malicious')

        plt.xlabel('Time Period')
        plt.ylabel('Percentage %')
        
        plt.xticks(rotation=70)
        plt.yticks(np.arange(30.0, 100.1, 5))

        plt.grid()

        figure = plt.gcf()
        figure.set_size_inches(12, 6)
        plt.savefig(f'{self.file_name}.png', bbox_inches="tight", pad_inches=0.3, dpi=200)
        plt.show()

class Graph:
    def __init__(self, values, color, marker, linestyle, label) -> None:
        self.values = values
        self.avg_value = round(sum(self.values) / len(self.values), 1)
        self.color = color
        self.marker = marker
        self.linestyle = linestyle
        self.label = label

class Plot:
    def __init__(self, title, picture_name) -> None:
        self.title = title
        self.picture_name = picture_name
        self.graphs = []
    
    def add_graph(self, graph):
        self.graphs.append(graph)
    
    def display(self):
        for graph in self.graphs:
            plt.plot(TIME_PERIODS, graph.values, color=graph.color, marker=graph.marker,
                     linestyle=graph.linestyle, label=graph.label)
            plt.axhline(y=graph.avg_value, color=graph.color, linestyle='dashed', linewidth=1,
                        label=f'{graph.label} avg ({graph.avg_value}%)')
        
        plt.legend()
        plt.title(self.title)
        
        plt.xlabel('Time Period')
        plt.ylabel('Percentage %')
        
        plt.xticks(rotation=70)
        plt.yticks(np.arange(30.0, 100.1, 5))

        plt.grid()

        figure = plt.gcf()
        figure.set_size_inches(12, 6)
        plt.savefig(self.picture_name, bbox_inches="tight", pad_inches=0.3, dpi=200)
        plt.show()