import pandas as pd
from imblearn.under_sampling import RandomUnderSampler

from features import SYSTEMCALLS, PERMISSIONS

FEATURES = SYSTEMCALLS + PERMISSIONS

def distribute(data):
    X = data[FEATURES]
    y = data.Malware
    print(y.value_counts())

    benign, malicious = y.value_counts()[0], y.value_counts()[1]

    ratio = malicious / (benign + malicious)

    print(ratio)

    if ratio < 0.07:
        number_of_benign = malicious * 9
        X, y = RandomUnderSampler(sampling_strategy={0: number_of_benign, 1: malicious}).fit_resample(X, y)
    if ratio > 0.18:
        number_of_malicious = benign // 9
        X, y = RandomUnderSampler(sampling_strategy={0: benign, 1: number_of_malicious}).fit_resample(X, y)

    new_data = X.assign(Malware=y)

    return new_data

for year in range(2010, 2019, 1):
    for quater in [1, 2, 3, 4]:
        file_train = f'D:/kronodroid/datasets/subsets_20_kept-Normalized/train/{year}-Q{quater}.csv'
        file_test = f'D:/kronodroid/datasets/subsets_20_kept-Normalized/test/{year}-Q{quater}.csv'

        data_train = pd.read_csv(file_train)
        data_test = pd.read_csv(file_test)

        data_train = distribute(data_train)
        data_test = distribute(data_test)

        data_train.to_csv(f'D:/kronodroid/datasets/realistic_datasets-Normalized/train/{year}-Q{quater}.csv', index=False)
        data_test.to_csv(f'D:/kronodroid/datasets/realistic_datasets-Normalized/test/{year}-Q{quater}.csv', index=False)

        print(f'{year}-Q{quater} done.\n')