import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

DTYPE = {472: 'str', 473: 'str', 474: 'str', 475: 'str', 476: 'str', 477: 'str', 478: 'str', 479: 'str', 480: 'str'}
TIME_PERIODS = ['2010-Q1', '2010-Q2', '2010-Q3', '2010-Q4', '2011-Q1', '2011-Q2', '2011-Q3', '2011-Q4', '2012-Q1',
                '2012-Q2', '2012-Q3', '2012-Q4', '2013-Q1', '2013-Q2', '2013-Q3', '2013-Q4', '2014-Q1', '2014-Q2',
                '2014-Q3', '2014-Q4', '2015-Q1', '2015-Q2', '2015-Q3', '2015-Q4', '2016-Q1', '2016-Q2', '2016-Q3',
                '2016-Q4', '2017-Q1', '2017-Q2', '2017-Q3', '2017-Q4', '2018-Q1', '2018-Q2', '2018-Q3', '2018-Q4']

def display_distribution(train_0, train_1, test_0, test_1):
    fig, ax = plt.subplots()

    bar_width = 2
    # positions_train = np.arange(len(TIME_PERIODS))
    # positions_test = [x + bar_width for x in positions_train]

    positions_test = np.arange(len(TIME_PERIODS) * 2, 0, -2)

    # for i in range(len(train_0)):
    #     benign = train_0[i]
    #     malicious = train_1[i]
    #     train_0[i] = 100 * benign / (benign + malicious)
    #     train_1[i] = 100 * malicious / (benign + malicious)

    #     benign = test_0[i]
    #     malicious = test_1[i]
    #     test_0[i] = 100 * benign / (benign + malicious)
    #     test_1[i] = 100 * malicious / (benign + malicious)

    # p_train_0 = plt.bar(positions_train, train_0, width=bar_width, label='train benign', color='#598fc2', edgecolor='white')
    # p_train_1 = plt.bar(positions_train, train_1, width=bar_width, bottom=train_0, label='train malicious', color='#bf5858', edgecolor='white')
    p_test_0 = ax.barh(positions_test, test_0, height=1.8, label='benign', color='#025aad', edgecolor='white')
    p_test_1 = ax.barh(positions_test, test_1, height=1.8, left=test_0, label='malicious', color='#702626', edgecolor='white')
    ax.bar_label(p_test_1, labels=[f'{b} / {m}' for b, m in zip(test_0, test_1)], padding=6, fontsize=10)

    plt.title(f'Goodware / Malware distribution in test datasets with added 20% of each previous dataset and malware undersampled to 10%')

    plt.ylabel('Time Period')
    plt.xlabel('Number of samples')
    
    plt.yticks([r for r in range(len(TIME_PERIODS) * 2, 0, -2)], TIME_PERIODS)
    plt.xticks(np.arange(0, 13001, 1000))
    plt.legend()

    # plt.grid()

    figure = plt.gcf()
    figure.set_size_inches(12, 9)
    plt.savefig('./plots/Distribution_20kept_10malware.png', bbox_inches="tight", pad_inches=0.3, dpi=200)
    plt.show()

if __name__ == '__main__':
    train_0 = []
    train_1 = []
    test_0 = []
    test_1 = []

    data = pd.read_csv('./datasets/realistic_datasets/test/2010-Q1.csv')

    for year in range(2010, 2019, 1):
            for quater in [1, 2, 3, 4]:
                file = f'./datasets/realistic_datasets/test/{year}-Q{quater}.csv'
                new_data = pd.read_csv(file)

                train_0.append(data.Malware.value_counts()[0])
                train_1.append(data.Malware.value_counts()[1])
                test_0.append(new_data.Malware.value_counts()[0])
                test_1.append(new_data.Malware.value_counts()[1])

                data = pd.concat([data, new_data]).sample(frac=1)

    print('train_0 =', train_0)
    print('train_1 =', train_1)
    print('test_0 =', test_0)
    print('test_1 =', test_1)

    display_distribution(train_0, train_1, test_0, test_1)
