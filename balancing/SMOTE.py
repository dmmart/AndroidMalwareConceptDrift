import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import precision_score, recall_score, accuracy_score, f1_score
from features import SYSTEMCALLS, PERMISSIONS
import time
from imblearn.over_sampling import SMOTE

FEATURES = SYSTEMCALLS + PERMISSIONS

class Scores:
    def __init__(self, name) -> None:
        self.name = name
        self.accuracy = []
        self.f1 = []
        self.precision = []
        self.recall = []
    
    def get_scores(self, accuracy, precision, recall, f1):
        self.accuracy.append(accuracy)
        self.f1.append(f1)
        self.precision.append(precision)
        self.recall.append(recall)
    
    def display(self):
        print(f'{self.name}_accuracy =', self.accuracy)
        print(f'{self.name}_f1 =', self.f1)
        print(f'{self.name}_recall =', self.recall)
        print(f'{self.name}_precision =', self.precision)


def evaluate(model, data, features):
    X_test = data[features]
    y_test = data.Malware

    y_pred = model.predict(X_test)

    accuracy = round(accuracy_score(y_test, y_pred) * 100, 1)
    precision = round(precision_score(y_test, y_pred) * 100, 1)
    recall = round(recall_score(y_test, y_pred) * 100, 1)
    f1 = round(f1_score(y_test, y_pred) * 100, 1)

    return accuracy, precision, recall, f1

def new_data():
    retrain_scores = Scores('SMOTE')

    data = pd.read_csv('./datasets/subsets_by_EarliestModDate/2010-Q1.csv')

    retrain_model = RandomForestClassifier(n_jobs=-1)
    retrain_model.fit(data[FEATURES], data.Malware)

    for year in range(2010, 2019, 1):
        for quater in [1, 2, 3, 4]:
            file = f'./datasets/subsets_by_EarliestModDate/{year}-Q{quater}.csv'
            if file == './datasets/subsets_by_EarliestModDate/2010-Q1.csv':
                continue

            new_data = pd.read_csv(file)

            # evaluate
            accuracy, precision, recall, f1 = evaluate(retrain_model, new_data, FEATURES)
            retrain_scores.get_scores(accuracy, precision, recall, f1)
            print(f'{year}-Q{quater} ', accuracy, precision, recall, f1)

            # retrain
            data = pd.concat([data, new_data]).sample(frac=1)
            X, y = SMOTE().fit_resample(data[FEATURES], data.Malware)
            retrain_model.fit(X, y)

    retrain_scores.display()

def real_data():
    retrain_scores = Scores('SMOTE')

    data_train = pd.read_csv('./datasets/realistic_datasets/train/2010-Q1.csv')

    retrain_model = RandomForestClassifier(n_jobs=-1)
    retrain_model.fit(data_train[FEATURES], data_train.Malware)

    for year in range(2010, 2019, 1):
        for quater in [1, 2, 3, 4]:

            train_file = f'./datasets/realistic_datasets/train/{year}-Q{quater}.csv'
            test_file = f'./datasets/realistic_datasets/test/{year}-Q{quater}.csv'
            if train_file == './datasets/realistic_datasets/train/2010-Q1.csv' or test_file == './datasets/realistic_datasets/test/2010-Q1.csv':
                continue

            new_data_train = pd.read_csv(train_file)
            data_test = pd.read_csv(test_file)

            # evaluate

            accuracy, precision, recall, f1 = evaluate(retrain_model, data_test, FEATURES)
            retrain_scores.get_scores(accuracy, precision, recall, f1)
            print(f'{year}-Q{quater} ', accuracy, precision, recall, f1)

            # retrain

            data_train = pd.concat([data_train, new_data_train]).sample(frac=1)
            X, y = SMOTE().fit_resample(data_train[FEATURES], data_train.Malware)
            retrain_model.fit(X, y)

    retrain_scores.display()

if __name__ == '__main__':
    st = time.process_time()

    new_data()

    et = time.process_time()

    res = et - st
    print('CPU Execution time:', res, 'seconds')